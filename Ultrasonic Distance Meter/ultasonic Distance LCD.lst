
ultasonic Distance LCD.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000770  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000016  00800060  00000770  00000804  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000001c  00800076  00800076  0000081a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000081a  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000028  00000000  00000000  0000084a  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000c93  00000000  00000000  00000872  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000002d1  00000000  00000000  00001505  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000025c  00000000  00000000  000017d6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000001c8  00000000  00000000  00001a34  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000002c3  00000000  00000000  00001bfc  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000004d1  00000000  00000000  00001ebf  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000018  00000000  00000000  00002390  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0a c0       	rjmp	.+20     	; 0x16 <__ctors_end>
   2:	23 c0       	rjmp	.+70     	; 0x4a <__bad_interrupt>
   4:	22 c0       	rjmp	.+68     	; 0x4a <__bad_interrupt>
   6:	9d c1       	rjmp	.+826    	; 0x342 <__vector_3>
   8:	20 c0       	rjmp	.+64     	; 0x4a <__bad_interrupt>
   a:	05 c1       	rjmp	.+522    	; 0x216 <__vector_5>
   c:	1e c0       	rjmp	.+60     	; 0x4a <__bad_interrupt>
   e:	1d c0       	rjmp	.+58     	; 0x4a <__bad_interrupt>
  10:	1c c0       	rjmp	.+56     	; 0x4a <__bad_interrupt>
  12:	1b c0       	rjmp	.+54     	; 0x4a <__bad_interrupt>
  14:	1a c0       	rjmp	.+52     	; 0x4a <__bad_interrupt>

00000016 <__ctors_end>:
  16:	11 24       	eor	r1, r1
  18:	1f be       	out	0x3f, r1	; 63
  1a:	cf ed       	ldi	r28, 0xDF	; 223
  1c:	cd bf       	out	0x3d, r28	; 61

0000001e <__do_copy_data>:
  1e:	10 e0       	ldi	r17, 0x00	; 0
  20:	a0 e6       	ldi	r26, 0x60	; 96
  22:	b0 e0       	ldi	r27, 0x00	; 0
  24:	e0 e7       	ldi	r30, 0x70	; 112
  26:	f7 e0       	ldi	r31, 0x07	; 7
  28:	03 c0       	rjmp	.+6      	; 0x30 <__do_copy_data+0x12>
  2a:	c8 95       	lpm
  2c:	31 96       	adiw	r30, 0x01	; 1
  2e:	0d 92       	st	X+, r0
  30:	a6 37       	cpi	r26, 0x76	; 118
  32:	b1 07       	cpc	r27, r17
  34:	d1 f7       	brne	.-12     	; 0x2a <__do_copy_data+0xc>

00000036 <__do_clear_bss>:
  36:	20 e0       	ldi	r18, 0x00	; 0
  38:	a6 e7       	ldi	r26, 0x76	; 118
  3a:	b0 e0       	ldi	r27, 0x00	; 0
  3c:	01 c0       	rjmp	.+2      	; 0x40 <.do_clear_bss_start>

0000003e <.do_clear_bss_loop>:
  3e:	1d 92       	st	X+, r1

00000040 <.do_clear_bss_start>:
  40:	a2 39       	cpi	r26, 0x92	; 146
  42:	b2 07       	cpc	r27, r18
  44:	e1 f7       	brne	.-8      	; 0x3e <.do_clear_bss_loop>
  46:	d1 d1       	rcall	.+930    	; 0x3ea <main>
  48:	91 c3       	rjmp	.+1826   	; 0x76c <_exit>

0000004a <__bad_interrupt>:
  4a:	da cf       	rjmp	.-76     	; 0x0 <__vectors>

0000004c <set_LCD_data_pin>:
#include<util/delay.h>

//LCD 4 Bit Interfacing Functions

void set_LCD_data_pin(char pin){
	LCD_Data_Port |= 1 << pin; 
  4c:	98 b3       	in	r25, 0x18	; 24
  4e:	21 e0       	ldi	r18, 0x01	; 1
  50:	30 e0       	ldi	r19, 0x00	; 0
  52:	08 2e       	mov	r0, r24
  54:	01 c0       	rjmp	.+2      	; 0x58 <set_LCD_data_pin+0xc>
  56:	22 0f       	add	r18, r18
  58:	0a 94       	dec	r0
  5a:	ea f7       	brpl	.-6      	; 0x56 <set_LCD_data_pin+0xa>
  5c:	92 2b       	or	r25, r18
  5e:	98 bb       	out	0x18, r25	; 24
  60:	08 95       	ret

00000062 <clear_LCD_data_pin>:
}

void clear_LCD_data_pin(char pin){
	LCD_Data_Port &= ~(1 << pin); 
  62:	98 b3       	in	r25, 0x18	; 24
  64:	21 e0       	ldi	r18, 0x01	; 1
  66:	30 e0       	ldi	r19, 0x00	; 0
  68:	08 2e       	mov	r0, r24
  6a:	01 c0       	rjmp	.+2      	; 0x6e <clear_LCD_data_pin+0xc>
  6c:	22 0f       	add	r18, r18
  6e:	0a 94       	dec	r0
  70:	ea f7       	brpl	.-6      	; 0x6c <clear_LCD_data_pin+0xa>
  72:	20 95       	com	r18
  74:	29 23       	and	r18, r25
  76:	28 bb       	out	0x18, r18	; 24
  78:	08 95       	ret

0000007a <set_LCD_control_pin>:
}

void set_LCD_control_pin(char pin){
	LCD_Control_Port |= 1 << pin;
  7a:	92 b3       	in	r25, 0x12	; 18
  7c:	21 e0       	ldi	r18, 0x01	; 1
  7e:	30 e0       	ldi	r19, 0x00	; 0
  80:	08 2e       	mov	r0, r24
  82:	01 c0       	rjmp	.+2      	; 0x86 <set_LCD_control_pin+0xc>
  84:	22 0f       	add	r18, r18
  86:	0a 94       	dec	r0
  88:	ea f7       	brpl	.-6      	; 0x84 <set_LCD_control_pin+0xa>
  8a:	92 2b       	or	r25, r18
  8c:	92 bb       	out	0x12, r25	; 18
  8e:	08 95       	ret

00000090 <clear_LCD_control_pin>:
}

void clear_LCD_control_pin(char pin){
	LCD_Control_Port &= ~(1 << pin);
  90:	92 b3       	in	r25, 0x12	; 18
  92:	21 e0       	ldi	r18, 0x01	; 1
  94:	30 e0       	ldi	r19, 0x00	; 0
  96:	08 2e       	mov	r0, r24
  98:	01 c0       	rjmp	.+2      	; 0x9c <clear_LCD_control_pin+0xc>
  9a:	22 0f       	add	r18, r18
  9c:	0a 94       	dec	r0
  9e:	ea f7       	brpl	.-6      	; 0x9a <clear_LCD_control_pin+0xa>
  a0:	20 95       	com	r18
  a2:	29 23       	and	r18, r25
  a4:	22 bb       	out	0x12, r18	; 18
  a6:	08 95       	ret

000000a8 <Lcd4_Port>:
}

void Lcd4_Port(char a)
{
  a8:	cf 93       	push	r28
  aa:	c8 2f       	mov	r28, r24
	if(a & 1)
	set_LCD_data_pin(D4);
  ac:	80 e0       	ldi	r24, 0x00	; 0
	LCD_Control_Port &= ~(1 << pin);
}

void Lcd4_Port(char a)
{
	if(a & 1)
  ae:	c0 ff       	sbrs	r28, 0
  b0:	02 c0       	rjmp	.+4      	; 0xb6 <Lcd4_Port+0xe>
	set_LCD_data_pin(D4);
  b2:	cc df       	rcall	.-104    	; 0x4c <set_LCD_data_pin>
  b4:	01 c0       	rjmp	.+2      	; 0xb8 <Lcd4_Port+0x10>
	else
	clear_LCD_data_pin(D4);
  b6:	d5 df       	rcall	.-86     	; 0x62 <clear_LCD_data_pin>
	
	if(a & 2)
	set_LCD_data_pin(D5);
  b8:	81 e0       	ldi	r24, 0x01	; 1
	if(a & 1)
	set_LCD_data_pin(D4);
	else
	clear_LCD_data_pin(D4);
	
	if(a & 2)
  ba:	c1 ff       	sbrs	r28, 1
  bc:	02 c0       	rjmp	.+4      	; 0xc2 <Lcd4_Port+0x1a>
	set_LCD_data_pin(D5);
  be:	c6 df       	rcall	.-116    	; 0x4c <set_LCD_data_pin>
  c0:	01 c0       	rjmp	.+2      	; 0xc4 <Lcd4_Port+0x1c>
	else
	clear_LCD_data_pin(D5);
  c2:	cf df       	rcall	.-98     	; 0x62 <clear_LCD_data_pin>
	
	if(a & 4)
	set_LCD_data_pin(D6);
  c4:	82 e0       	ldi	r24, 0x02	; 2
	if(a & 2)
	set_LCD_data_pin(D5);
	else
	clear_LCD_data_pin(D5);
	
	if(a & 4)
  c6:	c2 ff       	sbrs	r28, 2
  c8:	02 c0       	rjmp	.+4      	; 0xce <Lcd4_Port+0x26>
	set_LCD_data_pin(D6);
  ca:	c0 df       	rcall	.-128    	; 0x4c <set_LCD_data_pin>
  cc:	01 c0       	rjmp	.+2      	; 0xd0 <Lcd4_Port+0x28>
	else
	clear_LCD_data_pin(D6);
  ce:	c9 df       	rcall	.-110    	; 0x62 <clear_LCD_data_pin>
	
	if(a & 8)
	set_LCD_data_pin(D7);
  d0:	83 e0       	ldi	r24, 0x03	; 3
	if(a & 4)
	set_LCD_data_pin(D6);
	else
	clear_LCD_data_pin(D6);
	
	if(a & 8)
  d2:	c3 ff       	sbrs	r28, 3
  d4:	02 c0       	rjmp	.+4      	; 0xda <Lcd4_Port+0x32>
	set_LCD_data_pin(D7);
	else
	clear_LCD_data_pin(D7);
}
  d6:	cf 91       	pop	r28
	set_LCD_data_pin(D6);
	else
	clear_LCD_data_pin(D6);
	
	if(a & 8)
	set_LCD_data_pin(D7);
  d8:	b9 cf       	rjmp	.-142    	; 0x4c <set_LCD_data_pin>
	else
	clear_LCD_data_pin(D7);
}
  da:	cf 91       	pop	r28
	clear_LCD_data_pin(D6);
	
	if(a & 8)
	set_LCD_data_pin(D7);
	else
	clear_LCD_data_pin(D7);
  dc:	c2 cf       	rjmp	.-124    	; 0x62 <clear_LCD_data_pin>

000000de <Lcd4_Cmd>:
}
void Lcd4_Cmd(char a)
{
  de:	cf 93       	push	r28
  e0:	c8 2f       	mov	r28, r24
	clear_LCD_control_pin(RS);             // => RS = 0
  e2:	83 e0       	ldi	r24, 0x03	; 3
  e4:	d5 df       	rcall	.-86     	; 0x90 <clear_LCD_control_pin>
	Lcd4_Port(a);
  e6:	8c 2f       	mov	r24, r28
  e8:	df df       	rcall	.-66     	; 0xa8 <Lcd4_Port>
	set_LCD_control_pin(EN);            // => E = 1
  ea:	84 e0       	ldi	r24, 0x04	; 4
  ec:	c6 df       	rcall	.-116    	; 0x7a <set_LCD_control_pin>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  ee:	87 ee       	ldi	r24, 0xE7	; 231
  f0:	93 e0       	ldi	r25, 0x03	; 3
  f2:	01 97       	sbiw	r24, 0x01	; 1
  f4:	f1 f7       	brne	.-4      	; 0xf2 <__stack+0x13>
  f6:	00 c0       	rjmp	.+0      	; 0xf8 <__stack+0x19>
  f8:	00 00       	nop
	_delay_ms(1);
	clear_LCD_control_pin(EN);             // => E = 0
  fa:	84 e0       	ldi	r24, 0x04	; 4
  fc:	c9 df       	rcall	.-110    	; 0x90 <clear_LCD_control_pin>
  fe:	87 ee       	ldi	r24, 0xE7	; 231
 100:	93 e0       	ldi	r25, 0x03	; 3
 102:	01 97       	sbiw	r24, 0x01	; 1
 104:	f1 f7       	brne	.-4      	; 0x102 <__stack+0x23>
 106:	00 c0       	rjmp	.+0      	; 0x108 <__stack+0x29>
 108:	00 00       	nop
	_delay_ms(1);
}
 10a:	cf 91       	pop	r28
 10c:	08 95       	ret

0000010e <Lcd4_Clear>:

void Lcd4_Clear()
{
	Lcd4_Cmd(0);
 10e:	80 e0       	ldi	r24, 0x00	; 0
 110:	e6 df       	rcall	.-52     	; 0xde <Lcd4_Cmd>
	Lcd4_Cmd(1);
 112:	81 e0       	ldi	r24, 0x01	; 1
 114:	e4 cf       	rjmp	.-56     	; 0xde <Lcd4_Cmd>

00000116 <Lcd4_Set_Cursor>:
}

void Lcd4_Set_Cursor(char a, char b)
{
 116:	cf 93       	push	r28
 118:	c6 2f       	mov	r28, r22
	char temp,z,y;
	if(a == 1)
 11a:	81 30       	cpi	r24, 0x01	; 1
 11c:	11 f4       	brne	.+4      	; 0x122 <Lcd4_Set_Cursor+0xc>
	{
		temp = 0x80 + b;
 11e:	80 e8       	ldi	r24, 0x80	; 128
 120:	03 c0       	rjmp	.+6      	; 0x128 <Lcd4_Set_Cursor+0x12>
		z = temp>>4;
		y = (0x80+b) & 0x0F;
		Lcd4_Cmd(z);
		Lcd4_Cmd(y);
	}
	else if(a == 2)
 122:	82 30       	cpi	r24, 0x02	; 2
 124:	59 f4       	brne	.+22     	; 0x13c <Lcd4_Set_Cursor+0x26>
	{
		temp = 0xC0 + b;
 126:	80 ec       	ldi	r24, 0xC0	; 192
 128:	8c 0f       	add	r24, r28
		z = temp>>4;
		y = (0xC0+b) & 0x0F;
		Lcd4_Cmd(z);
 12a:	85 95       	asr	r24
 12c:	85 95       	asr	r24
 12e:	85 95       	asr	r24
 130:	85 95       	asr	r24
 132:	d5 df       	rcall	.-86     	; 0xde <Lcd4_Cmd>
		Lcd4_Cmd(y);
 134:	8c 2f       	mov	r24, r28
 136:	8f 70       	andi	r24, 0x0F	; 15
	}
}
 138:	cf 91       	pop	r28
	{
		temp = 0xC0 + b;
		z = temp>>4;
		y = (0xC0+b) & 0x0F;
		Lcd4_Cmd(z);
		Lcd4_Cmd(y);
 13a:	d1 cf       	rjmp	.-94     	; 0xde <Lcd4_Cmd>
	}
}
 13c:	cf 91       	pop	r28
 13e:	08 95       	ret

00000140 <Lcd4_Init>:

void Lcd4_Init()
{
	Lcd4_Port(0x00);
 140:	80 e0       	ldi	r24, 0x00	; 0
 142:	b2 df       	rcall	.-156    	; 0xa8 <Lcd4_Port>
 144:	8f e1       	ldi	r24, 0x1F	; 31
 146:	9e e4       	ldi	r25, 0x4E	; 78
 148:	01 97       	sbiw	r24, 0x01	; 1
 14a:	f1 f7       	brne	.-4      	; 0x148 <Lcd4_Init+0x8>
 14c:	00 c0       	rjmp	.+0      	; 0x14e <Lcd4_Init+0xe>
 14e:	00 00       	nop
	_delay_ms(20);
	///////////// Reset process from data sheet /////////
	Lcd4_Cmd(0x03);
 150:	83 e0       	ldi	r24, 0x03	; 3
 152:	c5 df       	rcall	.-118    	; 0xde <Lcd4_Cmd>
 154:	87 e8       	ldi	r24, 0x87	; 135
 156:	93 e1       	ldi	r25, 0x13	; 19
 158:	01 97       	sbiw	r24, 0x01	; 1
 15a:	f1 f7       	brne	.-4      	; 0x158 <Lcd4_Init+0x18>
 15c:	00 c0       	rjmp	.+0      	; 0x15e <Lcd4_Init+0x1e>
 15e:	00 00       	nop
	_delay_ms(5);
	Lcd4_Cmd(0x03);
 160:	83 e0       	ldi	r24, 0x03	; 3
 162:	bd df       	rcall	.-134    	; 0xde <Lcd4_Cmd>
 164:	87 ef       	ldi	r24, 0xF7	; 247
 166:	9a e2       	ldi	r25, 0x2A	; 42
 168:	01 97       	sbiw	r24, 0x01	; 1
 16a:	f1 f7       	brne	.-4      	; 0x168 <Lcd4_Init+0x28>
 16c:	00 c0       	rjmp	.+0      	; 0x16e <Lcd4_Init+0x2e>
 16e:	00 00       	nop
	_delay_ms(11);
	Lcd4_Cmd(0x03);
 170:	83 e0       	ldi	r24, 0x03	; 3
 172:	b5 df       	rcall	.-150    	; 0xde <Lcd4_Cmd>
	/////////////////////////////////////////////////////
	Lcd4_Cmd(0x02);
 174:	82 e0       	ldi	r24, 0x02	; 2
 176:	b3 df       	rcall	.-154    	; 0xde <Lcd4_Cmd>
	Lcd4_Cmd(0x02);
 178:	82 e0       	ldi	r24, 0x02	; 2
 17a:	b1 df       	rcall	.-158    	; 0xde <Lcd4_Cmd>
	Lcd4_Cmd(0x08);
 17c:	88 e0       	ldi	r24, 0x08	; 8
 17e:	af df       	rcall	.-162    	; 0xde <Lcd4_Cmd>
	Lcd4_Cmd(0x00);
 180:	80 e0       	ldi	r24, 0x00	; 0
 182:	ad df       	rcall	.-166    	; 0xde <Lcd4_Cmd>
	Lcd4_Cmd(0x0C);
 184:	8c e0       	ldi	r24, 0x0C	; 12
 186:	ab df       	rcall	.-170    	; 0xde <Lcd4_Cmd>
	Lcd4_Cmd(0x00);
 188:	80 e0       	ldi	r24, 0x00	; 0
 18a:	a9 df       	rcall	.-174    	; 0xde <Lcd4_Cmd>
	Lcd4_Cmd(0x06);
 18c:	86 e0       	ldi	r24, 0x06	; 6
 18e:	a7 cf       	rjmp	.-178    	; 0xde <Lcd4_Cmd>

00000190 <Lcd4_Write_Char>:
}

void Lcd4_Write_Char(char a)
{
 190:	cf 93       	push	r28
 192:	c8 2f       	mov	r28, r24
	char temp,y;
	temp = a&0x0F;
	y = a&0xF0;
	set_LCD_control_pin(RS);             // => RS = 1
 194:	83 e0       	ldi	r24, 0x03	; 3
 196:	71 df       	rcall	.-286    	; 0x7a <set_LCD_control_pin>
	Lcd4_Port(y>>4);             //Data transfer
 198:	8c 2f       	mov	r24, r28
 19a:	85 95       	asr	r24
 19c:	85 95       	asr	r24
 19e:	85 95       	asr	r24
 1a0:	85 95       	asr	r24
 1a2:	82 df       	rcall	.-252    	; 0xa8 <Lcd4_Port>
	set_LCD_control_pin(EN);
 1a4:	84 e0       	ldi	r24, 0x04	; 4
 1a6:	69 df       	rcall	.-302    	; 0x7a <set_LCD_control_pin>
 1a8:	87 ee       	ldi	r24, 0xE7	; 231
 1aa:	93 e0       	ldi	r25, 0x03	; 3
 1ac:	01 97       	sbiw	r24, 0x01	; 1
 1ae:	f1 f7       	brne	.-4      	; 0x1ac <Lcd4_Write_Char+0x1c>
 1b0:	00 c0       	rjmp	.+0      	; 0x1b2 <Lcd4_Write_Char+0x22>
 1b2:	00 00       	nop
	_delay_ms(1);
	clear_LCD_control_pin(EN);
 1b4:	84 e0       	ldi	r24, 0x04	; 4
 1b6:	6c df       	rcall	.-296    	; 0x90 <clear_LCD_control_pin>
 1b8:	87 ee       	ldi	r24, 0xE7	; 231
 1ba:	93 e0       	ldi	r25, 0x03	; 3
 1bc:	01 97       	sbiw	r24, 0x01	; 1
 1be:	f1 f7       	brne	.-4      	; 0x1bc <Lcd4_Write_Char+0x2c>
 1c0:	00 c0       	rjmp	.+0      	; 0x1c2 <Lcd4_Write_Char+0x32>
 1c2:	00 00       	nop
	_delay_ms(1);
	Lcd4_Port(temp);
 1c4:	8c 2f       	mov	r24, r28
 1c6:	8f 70       	andi	r24, 0x0F	; 15
 1c8:	6f df       	rcall	.-290    	; 0xa8 <Lcd4_Port>
	set_LCD_control_pin(EN);
 1ca:	84 e0       	ldi	r24, 0x04	; 4
 1cc:	56 df       	rcall	.-340    	; 0x7a <set_LCD_control_pin>
 1ce:	87 ee       	ldi	r24, 0xE7	; 231
 1d0:	93 e0       	ldi	r25, 0x03	; 3
 1d2:	01 97       	sbiw	r24, 0x01	; 1
 1d4:	f1 f7       	brne	.-4      	; 0x1d2 <Lcd4_Write_Char+0x42>
 1d6:	00 c0       	rjmp	.+0      	; 0x1d8 <Lcd4_Write_Char+0x48>
 1d8:	00 00       	nop
	_delay_ms(1);
	clear_LCD_control_pin(EN);
 1da:	84 e0       	ldi	r24, 0x04	; 4
 1dc:	59 df       	rcall	.-334    	; 0x90 <clear_LCD_control_pin>
 1de:	87 ee       	ldi	r24, 0xE7	; 231
 1e0:	93 e0       	ldi	r25, 0x03	; 3
 1e2:	01 97       	sbiw	r24, 0x01	; 1
 1e4:	f1 f7       	brne	.-4      	; 0x1e2 <Lcd4_Write_Char+0x52>
 1e6:	00 c0       	rjmp	.+0      	; 0x1e8 <Lcd4_Write_Char+0x58>
 1e8:	00 00       	nop
	_delay_ms(1);
}
 1ea:	cf 91       	pop	r28
 1ec:	08 95       	ret

000001ee <Lcd4_Write_String>:

void Lcd4_Write_String(char *a)
{
 1ee:	cf 93       	push	r28
 1f0:	df 93       	push	r29
 1f2:	c8 2f       	mov	r28, r24
 1f4:	d9 2f       	mov	r29, r25
	int i;
	for(i=0;a[i]!='\0';i++)
 1f6:	89 91       	ld	r24, Y+
 1f8:	88 23       	and	r24, r24
 1fa:	11 f0       	breq	.+4      	; 0x200 <Lcd4_Write_String+0x12>
	Lcd4_Write_Char(a[i]);
 1fc:	c9 df       	rcall	.-110    	; 0x190 <Lcd4_Write_Char>
 1fe:	fb cf       	rjmp	.-10     	; 0x1f6 <Lcd4_Write_String+0x8>
}
 200:	df 91       	pop	r29
 202:	cf 91       	pop	r28
 204:	08 95       	ret

00000206 <Lcd4_Shift_Right>:

void Lcd4_Shift_Right()
{
	Lcd4_Cmd(0x01);
 206:	81 e0       	ldi	r24, 0x01	; 1
 208:	6a df       	rcall	.-300    	; 0xde <Lcd4_Cmd>
	Lcd4_Cmd(0x0C);
 20a:	8c e0       	ldi	r24, 0x0C	; 12
 20c:	68 cf       	rjmp	.-304    	; 0xde <Lcd4_Cmd>

0000020e <Lcd4_Shift_Left>:
}

void Lcd4_Shift_Left()
{
	Lcd4_Cmd(0x01);
 20e:	81 e0       	ldi	r24, 0x01	; 1
 210:	66 df       	rcall	.-308    	; 0xde <Lcd4_Cmd>
	Lcd4_Cmd(0x08);
 212:	88 e0       	ldi	r24, 0x08	; 8
 214:	64 cf       	rjmp	.-312    	; 0xde <Lcd4_Cmd>

00000216 <__vector_5>:
		display_distance();
		overflow_counter = 0;
	}
}

ISR(TIMER1_OVF1_vect){
 216:	1f 92       	push	r1
 218:	0f 92       	push	r0
 21a:	0f b6       	in	r0, 0x3f	; 63
 21c:	0f 92       	push	r0
 21e:	11 24       	eor	r1, r1
 220:	8f 93       	push	r24
 222:	9f 93       	push	r25
	if(start_capture == 1){
 224:	80 91 86 00 	lds	r24, 0x0086
 228:	81 30       	cpi	r24, 0x01	; 1
 22a:	49 f4       	brne	.+18     	; 0x23e <__vector_5+0x28>
		overflow_counter += 1;
 22c:	80 91 87 00 	lds	r24, 0x0087
 230:	90 91 88 00 	lds	r25, 0x0088
 234:	01 96       	adiw	r24, 0x01	; 1
 236:	90 93 88 00 	sts	0x0088, r25
 23a:	80 93 87 00 	sts	0x0087, r24
	}
}
 23e:	9f 91       	pop	r25
 240:	8f 91       	pop	r24
 242:	0f 90       	pop	r0
 244:	0f be       	out	0x3f, r0	; 63
 246:	0f 90       	pop	r0
 248:	1f 90       	pop	r1
 24a:	18 95       	reti

0000024c <calc_capture_us>:

void calc_capture_us(){
 24c:	0f 93       	push	r16
 24e:	1f 93       	push	r17
	last_capture += overflow_counter *  65536 ;
 250:	80 91 87 00 	lds	r24, 0x0087
 254:	90 91 88 00 	lds	r25, 0x0088
 258:	aa 27       	eor	r26, r26
 25a:	97 fd       	sbrc	r25, 7
 25c:	a0 95       	com	r26
 25e:	ba 2f       	mov	r27, r26
 260:	a8 2f       	mov	r26, r24
 262:	b9 2f       	mov	r27, r25
 264:	99 27       	eor	r25, r25
 266:	88 27       	eor	r24, r24
 268:	40 91 7e 00 	lds	r20, 0x007E
 26c:	50 91 7f 00 	lds	r21, 0x007F
 270:	60 91 80 00 	lds	r22, 0x0080
 274:	70 91 81 00 	lds	r23, 0x0081
 278:	84 0f       	add	r24, r20
 27a:	95 1f       	adc	r25, r21
 27c:	a6 1f       	adc	r26, r22
 27e:	b7 1f       	adc	r27, r23
 280:	80 93 7e 00 	sts	0x007E, r24
 284:	90 93 7f 00 	sts	0x007F, r25
 288:	a0 93 80 00 	sts	0x0080, r26
 28c:	b0 93 81 00 	sts	0x0081, r27
	unsigned long delta = last_capture - first_capture;
 290:	40 91 82 00 	lds	r20, 0x0082
 294:	50 91 83 00 	lds	r21, 0x0083
 298:	60 91 84 00 	lds	r22, 0x0084
 29c:	70 91 85 00 	lds	r23, 0x0085
 2a0:	08 2f       	mov	r16, r24
 2a2:	19 2f       	mov	r17, r25
 2a4:	2a 2f       	mov	r18, r26
 2a6:	3b 2f       	mov	r19, r27
 2a8:	04 1b       	sub	r16, r20
 2aa:	15 0b       	sbc	r17, r21
 2ac:	26 0b       	sbc	r18, r22
 2ae:	37 0b       	sbc	r19, r23
 2b0:	93 2f       	mov	r25, r19
 2b2:	82 2f       	mov	r24, r18
 2b4:	71 2f       	mov	r23, r17
 2b6:	60 2f       	mov	r22, r16
	capture_us = delta / F_CPU_Mhz;		// Input Capture1 Noise Canceler (4 XTAL clock frequency) for both low and high state give us the right pulse duratoin.
 2b8:	32 e0       	ldi	r19, 0x02	; 2
 2ba:	96 95       	lsr	r25
 2bc:	87 95       	ror	r24
 2be:	77 95       	ror	r23
 2c0:	67 95       	ror	r22
 2c2:	3a 95       	dec	r19
 2c4:	d1 f7       	brne	.-12     	; 0x2ba <calc_capture_us+0x6e>
 2c6:	15 d1       	rcall	.+554    	; 0x4f2 <__floatunsisf>
 2c8:	60 93 7a 00 	sts	0x007A, r22
 2cc:	70 93 7b 00 	sts	0x007B, r23
 2d0:	80 93 7c 00 	sts	0x007C, r24
 2d4:	90 93 7d 00 	sts	0x007D, r25
}
 2d8:	1f 91       	pop	r17
 2da:	0f 91       	pop	r16
 2dc:	08 95       	ret

000002de <display_distance>:

void display_distance(){
	cli();
 2de:	f8 94       	cli
	distance = capture_us * 0.017;		//time in micro seconds * [speed of sound in (cm / microsecond) / 2 = 0.017 cm/us]  
 2e0:	26 e9       	ldi	r18, 0x96	; 150
 2e2:	33 e4       	ldi	r19, 0x43	; 67
 2e4:	4b e8       	ldi	r20, 0x8B	; 139
 2e6:	5c e3       	ldi	r21, 0x3C	; 60
 2e8:	60 91 7a 00 	lds	r22, 0x007A
 2ec:	70 91 7b 00 	lds	r23, 0x007B
 2f0:	80 91 7c 00 	lds	r24, 0x007C
 2f4:	90 91 7d 00 	lds	r25, 0x007D
 2f8:	63 d1       	rcall	.+710    	; 0x5c0 <__mulsf3>
 2fa:	60 93 76 00 	sts	0x0076, r22
 2fe:	70 93 77 00 	sts	0x0077, r23
 302:	80 93 78 00 	sts	0x0078, r24
 306:	90 93 79 00 	sts	0x0079, r25
	Lcd4_Clear();
 30a:	01 df       	rcall	.-510    	; 0x10e <Lcd4_Clear>
	Lcd4_Write_String("Distance: ");
 30c:	80 e6       	ldi	r24, 0x60	; 96
 30e:	90 e0       	ldi	r25, 0x00	; 0
 310:	6e df       	rcall	.-292    	; 0x1ee <Lcd4_Write_String>
	Lcd4_Set_Cursor(2, 2);
 312:	62 e0       	ldi	r22, 0x02	; 2
 314:	82 e0       	ldi	r24, 0x02	; 2
 316:	ff de       	rcall	.-514    	; 0x116 <Lcd4_Set_Cursor>
	ltoa(distance, distance_string, 10);
 318:	60 91 76 00 	lds	r22, 0x0076
 31c:	70 91 77 00 	lds	r23, 0x0077
 320:	80 91 78 00 	lds	r24, 0x0078
 324:	90 91 79 00 	lds	r25, 0x0079
 328:	b3 d0       	rcall	.+358    	; 0x490 <__fixsfsi>
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__ltoa_ncheck (long, char *, unsigned char);
	return __ltoa_ncheck (__val, __s, __radix);
 32a:	2a e0       	ldi	r18, 0x0A	; 10
 32c:	4d e8       	ldi	r20, 0x8D	; 141
 32e:	50 e0       	ldi	r21, 0x00	; 0
 330:	da d1       	rcall	.+948    	; 0x6e6 <__ltoa_ncheck>
	Lcd4_Write_String(distance_string);
 332:	8d e8       	ldi	r24, 0x8D	; 141
 334:	90 e0       	ldi	r25, 0x00	; 0
 336:	5b df       	rcall	.-330    	; 0x1ee <Lcd4_Write_String>
	Lcd4_Write_String(" cm");
 338:	8b e6       	ldi	r24, 0x6B	; 107
 33a:	90 e0       	ldi	r25, 0x00	; 0
 33c:	58 df       	rcall	.-336    	; 0x1ee <Lcd4_Write_String>
	sei();
 33e:	78 94       	sei
 340:	08 95       	ret

00000342 <__vector_3>:
volatile char start_capture = 0;
unsigned long first_capture = 0 , last_capture = 0; 
double capture_us = 0, distance = 0;
char distance_string [5];

ISR(TIMER1_CAPT1_vect){
 342:	1f 92       	push	r1
 344:	0f 92       	push	r0
 346:	0f b6       	in	r0, 0x3f	; 63
 348:	0f 92       	push	r0
 34a:	11 24       	eor	r1, r1
 34c:	2f 93       	push	r18
 34e:	3f 93       	push	r19
 350:	4f 93       	push	r20
 352:	5f 93       	push	r21
 354:	6f 93       	push	r22
 356:	7f 93       	push	r23
 358:	8f 93       	push	r24
 35a:	9f 93       	push	r25
 35c:	af 93       	push	r26
 35e:	bf 93       	push	r27
 360:	ef 93       	push	r30
 362:	ff 93       	push	r31
	capture_register = ICR1;
 364:	84 b5       	in	r24, 0x24	; 36
 366:	95 b5       	in	r25, 0x25	; 37
 368:	a0 e0       	ldi	r26, 0x00	; 0
 36a:	b0 e0       	ldi	r27, 0x00	; 0
 36c:	80 93 89 00 	sts	0x0089, r24
 370:	90 93 8a 00 	sts	0x008A, r25
 374:	a0 93 8b 00 	sts	0x008B, r26
 378:	b0 93 8c 00 	sts	0x008C, r27
	if (start_capture == 0)
 37c:	20 91 86 00 	lds	r18, 0x0086
 380:	21 11       	cpse	r18, r1
 382:	0f c0       	rjmp	.+30     	; 0x3a2 <__vector_3+0x60>
	{
		first_capture = capture_register;
 384:	80 93 82 00 	sts	0x0082, r24
 388:	90 93 83 00 	sts	0x0083, r25
 38c:	a0 93 84 00 	sts	0x0084, r26
 390:	b0 93 85 00 	sts	0x0085, r27
		TCCR1B &= ~(1 << ICES1);			// clear =  Timer/Counter1 contents are transferred to the (ICR1) on the  falling edge.
 394:	8e b5       	in	r24, 0x2e	; 46
 396:	8f 7b       	andi	r24, 0xBF	; 191
 398:	8e bd       	out	0x2e, r24	; 46
		
		start_capture = 1;
 39a:	81 e0       	ldi	r24, 0x01	; 1
 39c:	80 93 86 00 	sts	0x0086, r24
 3a0:	13 c0       	rjmp	.+38     	; 0x3c8 <__vector_3+0x86>
	} else{
		last_capture = capture_register;
 3a2:	80 93 7e 00 	sts	0x007E, r24
 3a6:	90 93 7f 00 	sts	0x007F, r25
 3aa:	a0 93 80 00 	sts	0x0080, r26
 3ae:	b0 93 81 00 	sts	0x0081, r27
		TCCR1B |= (1 << ICES1);			// set =  Timer/Counter1 contents are transferred to the (ICR1) on the  rising edge.
 3b2:	8e b5       	in	r24, 0x2e	; 46
 3b4:	80 64       	ori	r24, 0x40	; 64
 3b6:	8e bd       	out	0x2e, r24	; 46
		start_capture = 0;
 3b8:	10 92 86 00 	sts	0x0086, r1
		calc_capture_us();
 3bc:	47 df       	rcall	.-370    	; 0x24c <calc_capture_us>
		display_distance();
 3be:	8f df       	rcall	.-226    	; 0x2de <display_distance>
		overflow_counter = 0;
 3c0:	10 92 88 00 	sts	0x0088, r1
 3c4:	10 92 87 00 	sts	0x0087, r1
	}
}
 3c8:	ff 91       	pop	r31
 3ca:	ef 91       	pop	r30
 3cc:	bf 91       	pop	r27
 3ce:	af 91       	pop	r26
 3d0:	9f 91       	pop	r25
 3d2:	8f 91       	pop	r24
 3d4:	7f 91       	pop	r23
 3d6:	6f 91       	pop	r22
 3d8:	5f 91       	pop	r21
 3da:	4f 91       	pop	r20
 3dc:	3f 91       	pop	r19
 3de:	2f 91       	pop	r18
 3e0:	0f 90       	pop	r0
 3e2:	0f be       	out	0x3f, r0	; 63
 3e4:	0f 90       	pop	r0
 3e6:	1f 90       	pop	r1
 3e8:	18 95       	reti

000003ea <main>:
	sei();
}

int main(void)
{
	cli();
 3ea:	f8 94       	cli
	//disable watchdog if enabled
   	wdt_reset();
 3ec:	a8 95       	wdr
	WDTCR |= 1 << WDTOE | 1 << WDE ;
 3ee:	81 b5       	in	r24, 0x21	; 33
 3f0:	88 61       	ori	r24, 0x18	; 24
 3f2:	81 bd       	out	0x21, r24	; 33
	WDTCR  &= ~(1 << WDE);
 3f4:	81 b5       	in	r24, 0x21	; 33
 3f6:	87 7f       	andi	r24, 0xF7	; 247
 3f8:	81 bd       	out	0x21, r24	; 33

	// PD6 is Input Capture Pin in 2313 uC.
	// PD 5 is Trigger Pin.
	// PD3, PD4 is used as RS, EN for LCD Control.
	DDRD = (1 << PD5) | (1 << PD4) | (1 << PD3);
 3fa:	88 e3       	ldi	r24, 0x38	; 56
 3fc:	81 bb       	out	0x11, r24	; 17
	
	//PB[0..3] is used as data lines for LCD.
	DDRB = 1 << PB3 | 1 << PB2 | 1 << PB1 | 1 << PB0 ;
 3fe:	8f e0       	ldi	r24, 0x0F	; 15
 400:	87 bb       	out	0x17, r24	; 23
	// Timer/Counter1 Control Register B (TCCR1B) :
	//  ICNC1: Input Capture1 Noise Canceler (4 CKs) = enable.
	//  ICES1: Input Capture1 Edge Select : set (one) =  Timer/Counter1 contents are transferred to
	//													 the Input Capture Register (ICR1) on the rising edge.
	//  CS12, CS11, CS10: Clock Select1, Bits 2, 1 and 0 = XTAL clock frequency.
	TCCR1B = 1 << ICNC1 | 1 << ICES1 | 0 << CS12 | 0 << CS11 | 1<< CS10 ; 
 402:	81 ec       	ldi	r24, 0xC1	; 193
 404:	8e bd       	out	0x2e, r24	; 46
	
	// Timer/Counter Interrupt Mask Register (TIMSK) :
	//  TOIE1: Timer/Counter1 Overflow Interrupt Enable = true
	//  TICIE1: Timer/Counter1 Input Capture Interrupt Enable = true 
	TIMSK = 1 << TOIE1 | 1 << 3 ;      // ICIE1 for at tiny 2313 ,TICIE1 for at90s2313 (both at bit 3);
 406:	88 e8       	ldi	r24, 0x88	; 136
 408:	89 bf       	out	0x39, r24	; 57
	
	Lcd4_Init();		//this function do LCD initialization and set LCD to work on in 4 mode
 40a:	9a de       	rcall	.-716    	; 0x140 <Lcd4_Init>
	Lcd4_Clear();
 40c:	80 de       	rcall	.-768    	; 0x10e <Lcd4_Clear>
	Lcd4_Write_String("Distance: ");
 40e:	80 e6       	ldi	r24, 0x60	; 96
 410:	90 e0       	ldi	r25, 0x00	; 0
 412:	ed de       	rcall	.-550    	; 0x1ee <Lcd4_Write_String>
 414:	2f ef       	ldi	r18, 0xFF	; 255
 416:	84 e3       	ldi	r24, 0x34	; 52
 418:	9c e0       	ldi	r25, 0x0C	; 12
 41a:	21 50       	subi	r18, 0x01	; 1
 41c:	80 40       	sbci	r24, 0x00	; 0
 41e:	90 40       	sbci	r25, 0x00	; 0
 420:	e1 f7       	brne	.-8      	; 0x41a <main+0x30>
 422:	00 c0       	rjmp	.+0      	; 0x424 <main+0x3a>
 424:	00 00       	nop
	_delay_ms(1000);
	Lcd4_Write_String("1");
 426:	8f e6       	ldi	r24, 0x6F	; 111
 428:	90 e0       	ldi	r25, 0x00	; 0
 42a:	e1 de       	rcall	.-574    	; 0x1ee <Lcd4_Write_String>
 42c:	2f ef       	ldi	r18, 0xFF	; 255
 42e:	84 e3       	ldi	r24, 0x34	; 52
 430:	9c e0       	ldi	r25, 0x0C	; 12
 432:	21 50       	subi	r18, 0x01	; 1
 434:	80 40       	sbci	r24, 0x00	; 0
 436:	90 40       	sbci	r25, 0x00	; 0
 438:	e1 f7       	brne	.-8      	; 0x432 <main+0x48>
 43a:	00 c0       	rjmp	.+0      	; 0x43c <main+0x52>
 43c:	00 00       	nop
	_delay_ms(1000);
	Lcd4_Write_String("2");
 43e:	81 e7       	ldi	r24, 0x71	; 113
 440:	90 e0       	ldi	r25, 0x00	; 0
 442:	d5 de       	rcall	.-598    	; 0x1ee <Lcd4_Write_String>
 444:	2f ef       	ldi	r18, 0xFF	; 255
 446:	84 e3       	ldi	r24, 0x34	; 52
 448:	9c e0       	ldi	r25, 0x0C	; 12
 44a:	21 50       	subi	r18, 0x01	; 1
 44c:	80 40       	sbci	r24, 0x00	; 0
 44e:	90 40       	sbci	r25, 0x00	; 0
 450:	e1 f7       	brne	.-8      	; 0x44a <main+0x60>
 452:	00 c0       	rjmp	.+0      	; 0x454 <main+0x6a>
 454:	00 00       	nop
	_delay_ms(1000);
	Lcd4_Write_String("3");
 456:	83 e7       	ldi	r24, 0x73	; 115
 458:	90 e0       	ldi	r25, 0x00	; 0
 45a:	c9 de       	rcall	.-622    	; 0x1ee <Lcd4_Write_String>
 45c:	2f e7       	ldi	r18, 0x7F	; 127
 45e:	8a e1       	ldi	r24, 0x1A	; 26
 460:	96 e0       	ldi	r25, 0x06	; 6
 462:	21 50       	subi	r18, 0x01	; 1
 464:	80 40       	sbci	r24, 0x00	; 0
 466:	90 40       	sbci	r25, 0x00	; 0
 468:	e1 f7       	brne	.-8      	; 0x462 <main+0x78>
 46a:	00 c0       	rjmp	.+0      	; 0x46c <main+0x82>
 46c:	00 00       	nop
	_delay_ms(500);
	sei();	
 46e:	78 94       	sei
    {
		//In order to generate the ultrasound you need to set the Trig on a High State for 10 µs.
		// That will send out an 8 cycle sonic burst which will travel at the speed sound and it will be received in the Echo pin. 
		// The Echo pin will output the time in microseconds the sound wave traveled.
		
		PORTD |= 1 << TRIGGER_PIN;
 470:	95 9a       	sbi	0x12, 5	; 18
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 472:	2d e0       	ldi	r18, 0x0D	; 13
 474:	2a 95       	dec	r18
 476:	f1 f7       	brne	.-4      	; 0x474 <main+0x8a>
 478:	00 00       	nop
		_delay_us(10);
		PORTD &= ~(1 << TRIGGER_PIN);
 47a:	95 98       	cbi	0x12, 5	; 18
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 47c:	8f e7       	ldi	r24, 0x7F	; 127
 47e:	9a e1       	ldi	r25, 0x1A	; 26
 480:	26 e0       	ldi	r18, 0x06	; 6
 482:	81 50       	subi	r24, 0x01	; 1
 484:	90 40       	sbci	r25, 0x00	; 0
 486:	20 40       	sbci	r18, 0x00	; 0
 488:	e1 f7       	brne	.-8      	; 0x482 <main+0x98>
 48a:	00 c0       	rjmp	.+0      	; 0x48c <main+0xa2>
 48c:	00 00       	nop
 48e:	f0 cf       	rjmp	.-32     	; 0x470 <main+0x86>

00000490 <__fixsfsi>:
 490:	04 d0       	rcall	.+8      	; 0x49a <__fixunssfsi>
 492:	68 94       	set
 494:	b1 11       	cpse	r27, r1
 496:	8d c0       	rjmp	.+282    	; 0x5b2 <__fp_szero>
 498:	08 95       	ret

0000049a <__fixunssfsi>:
 49a:	70 d0       	rcall	.+224    	; 0x57c <__fp_splitA>
 49c:	88 f0       	brcs	.+34     	; 0x4c0 <__fixunssfsi+0x26>
 49e:	9f 57       	subi	r25, 0x7F	; 127
 4a0:	90 f0       	brcs	.+36     	; 0x4c6 <__fixunssfsi+0x2c>
 4a2:	b9 2f       	mov	r27, r25
 4a4:	99 27       	eor	r25, r25
 4a6:	b7 51       	subi	r27, 0x17	; 23
 4a8:	a0 f0       	brcs	.+40     	; 0x4d2 <__fixunssfsi+0x38>
 4aa:	d1 f0       	breq	.+52     	; 0x4e0 <__fixunssfsi+0x46>
 4ac:	66 0f       	add	r22, r22
 4ae:	77 1f       	adc	r23, r23
 4b0:	88 1f       	adc	r24, r24
 4b2:	99 1f       	adc	r25, r25
 4b4:	1a f0       	brmi	.+6      	; 0x4bc <__fixunssfsi+0x22>
 4b6:	ba 95       	dec	r27
 4b8:	c9 f7       	brne	.-14     	; 0x4ac <__fixunssfsi+0x12>
 4ba:	12 c0       	rjmp	.+36     	; 0x4e0 <__fixunssfsi+0x46>
 4bc:	b1 30       	cpi	r27, 0x01	; 1
 4be:	81 f0       	breq	.+32     	; 0x4e0 <__fixunssfsi+0x46>
 4c0:	77 d0       	rcall	.+238    	; 0x5b0 <__fp_zero>
 4c2:	b1 e0       	ldi	r27, 0x01	; 1
 4c4:	08 95       	ret
 4c6:	74 c0       	rjmp	.+232    	; 0x5b0 <__fp_zero>
 4c8:	67 2f       	mov	r22, r23
 4ca:	78 2f       	mov	r23, r24
 4cc:	88 27       	eor	r24, r24
 4ce:	b8 5f       	subi	r27, 0xF8	; 248
 4d0:	39 f0       	breq	.+14     	; 0x4e0 <__fixunssfsi+0x46>
 4d2:	b9 3f       	cpi	r27, 0xF9	; 249
 4d4:	cc f3       	brlt	.-14     	; 0x4c8 <__fixunssfsi+0x2e>
 4d6:	86 95       	lsr	r24
 4d8:	77 95       	ror	r23
 4da:	67 95       	ror	r22
 4dc:	b3 95       	inc	r27
 4de:	d9 f7       	brne	.-10     	; 0x4d6 <__fixunssfsi+0x3c>
 4e0:	3e f4       	brtc	.+14     	; 0x4f0 <__fixunssfsi+0x56>
 4e2:	90 95       	com	r25
 4e4:	80 95       	com	r24
 4e6:	70 95       	com	r23
 4e8:	61 95       	neg	r22
 4ea:	7f 4f       	sbci	r23, 0xFF	; 255
 4ec:	8f 4f       	sbci	r24, 0xFF	; 255
 4ee:	9f 4f       	sbci	r25, 0xFF	; 255
 4f0:	08 95       	ret

000004f2 <__floatunsisf>:
 4f2:	e8 94       	clt
 4f4:	09 c0       	rjmp	.+18     	; 0x508 <__floatsisf+0x12>

000004f6 <__floatsisf>:
 4f6:	97 fb       	bst	r25, 7
 4f8:	3e f4       	brtc	.+14     	; 0x508 <__floatsisf+0x12>
 4fa:	90 95       	com	r25
 4fc:	80 95       	com	r24
 4fe:	70 95       	com	r23
 500:	61 95       	neg	r22
 502:	7f 4f       	sbci	r23, 0xFF	; 255
 504:	8f 4f       	sbci	r24, 0xFF	; 255
 506:	9f 4f       	sbci	r25, 0xFF	; 255
 508:	99 23       	and	r25, r25
 50a:	a9 f0       	breq	.+42     	; 0x536 <__floatsisf+0x40>
 50c:	f9 2f       	mov	r31, r25
 50e:	96 e9       	ldi	r25, 0x96	; 150
 510:	bb 27       	eor	r27, r27
 512:	93 95       	inc	r25
 514:	f6 95       	lsr	r31
 516:	87 95       	ror	r24
 518:	77 95       	ror	r23
 51a:	67 95       	ror	r22
 51c:	b7 95       	ror	r27
 51e:	f1 11       	cpse	r31, r1
 520:	f8 cf       	rjmp	.-16     	; 0x512 <__floatsisf+0x1c>
 522:	fa f4       	brpl	.+62     	; 0x562 <__floatsisf+0x6c>
 524:	bb 0f       	add	r27, r27
 526:	11 f4       	brne	.+4      	; 0x52c <__floatsisf+0x36>
 528:	60 ff       	sbrs	r22, 0
 52a:	1b c0       	rjmp	.+54     	; 0x562 <__floatsisf+0x6c>
 52c:	6f 5f       	subi	r22, 0xFF	; 255
 52e:	7f 4f       	sbci	r23, 0xFF	; 255
 530:	8f 4f       	sbci	r24, 0xFF	; 255
 532:	9f 4f       	sbci	r25, 0xFF	; 255
 534:	16 c0       	rjmp	.+44     	; 0x562 <__floatsisf+0x6c>
 536:	88 23       	and	r24, r24
 538:	11 f0       	breq	.+4      	; 0x53e <__floatsisf+0x48>
 53a:	96 e9       	ldi	r25, 0x96	; 150
 53c:	11 c0       	rjmp	.+34     	; 0x560 <__floatsisf+0x6a>
 53e:	77 23       	and	r23, r23
 540:	21 f0       	breq	.+8      	; 0x54a <__floatsisf+0x54>
 542:	9e e8       	ldi	r25, 0x8E	; 142
 544:	87 2f       	mov	r24, r23
 546:	76 2f       	mov	r23, r22
 548:	05 c0       	rjmp	.+10     	; 0x554 <__floatsisf+0x5e>
 54a:	66 23       	and	r22, r22
 54c:	71 f0       	breq	.+28     	; 0x56a <__floatsisf+0x74>
 54e:	96 e8       	ldi	r25, 0x86	; 134
 550:	86 2f       	mov	r24, r22
 552:	70 e0       	ldi	r23, 0x00	; 0
 554:	60 e0       	ldi	r22, 0x00	; 0
 556:	2a f0       	brmi	.+10     	; 0x562 <__floatsisf+0x6c>
 558:	9a 95       	dec	r25
 55a:	66 0f       	add	r22, r22
 55c:	77 1f       	adc	r23, r23
 55e:	88 1f       	adc	r24, r24
 560:	da f7       	brpl	.-10     	; 0x558 <__floatsisf+0x62>
 562:	88 0f       	add	r24, r24
 564:	96 95       	lsr	r25
 566:	87 95       	ror	r24
 568:	97 f9       	bld	r25, 7
 56a:	08 95       	ret

0000056c <__fp_split3>:
 56c:	57 fd       	sbrc	r21, 7
 56e:	90 58       	subi	r25, 0x80	; 128
 570:	44 0f       	add	r20, r20
 572:	55 1f       	adc	r21, r21
 574:	59 f0       	breq	.+22     	; 0x58c <__fp_splitA+0x10>
 576:	5f 3f       	cpi	r21, 0xFF	; 255
 578:	71 f0       	breq	.+28     	; 0x596 <__fp_splitA+0x1a>
 57a:	47 95       	ror	r20

0000057c <__fp_splitA>:
 57c:	88 0f       	add	r24, r24
 57e:	97 fb       	bst	r25, 7
 580:	99 1f       	adc	r25, r25
 582:	61 f0       	breq	.+24     	; 0x59c <__fp_splitA+0x20>
 584:	9f 3f       	cpi	r25, 0xFF	; 255
 586:	79 f0       	breq	.+30     	; 0x5a6 <__fp_splitA+0x2a>
 588:	87 95       	ror	r24
 58a:	08 95       	ret
 58c:	12 16       	cp	r1, r18
 58e:	13 06       	cpc	r1, r19
 590:	14 06       	cpc	r1, r20
 592:	55 1f       	adc	r21, r21
 594:	f2 cf       	rjmp	.-28     	; 0x57a <__fp_split3+0xe>
 596:	46 95       	lsr	r20
 598:	f1 df       	rcall	.-30     	; 0x57c <__fp_splitA>
 59a:	08 c0       	rjmp	.+16     	; 0x5ac <__fp_splitA+0x30>
 59c:	16 16       	cp	r1, r22
 59e:	17 06       	cpc	r1, r23
 5a0:	18 06       	cpc	r1, r24
 5a2:	99 1f       	adc	r25, r25
 5a4:	f1 cf       	rjmp	.-30     	; 0x588 <__fp_splitA+0xc>
 5a6:	86 95       	lsr	r24
 5a8:	71 05       	cpc	r23, r1
 5aa:	61 05       	cpc	r22, r1
 5ac:	08 94       	sec
 5ae:	08 95       	ret

000005b0 <__fp_zero>:
 5b0:	e8 94       	clt

000005b2 <__fp_szero>:
 5b2:	bb 27       	eor	r27, r27
 5b4:	66 27       	eor	r22, r22
 5b6:	77 27       	eor	r23, r23
 5b8:	86 2f       	mov	r24, r22
 5ba:	97 2f       	mov	r25, r23
 5bc:	97 f9       	bld	r25, 7
 5be:	08 95       	ret

000005c0 <__mulsf3>:
 5c0:	0a d0       	rcall	.+20     	; 0x5d6 <__mulsf3x>
 5c2:	80 c0       	rjmp	.+256    	; 0x6c4 <__fp_round>
 5c4:	71 d0       	rcall	.+226    	; 0x6a8 <__fp_pscA>
 5c6:	28 f0       	brcs	.+10     	; 0x5d2 <__mulsf3+0x12>
 5c8:	76 d0       	rcall	.+236    	; 0x6b6 <__fp_pscB>
 5ca:	18 f0       	brcs	.+6      	; 0x5d2 <__mulsf3+0x12>
 5cc:	95 23       	and	r25, r21
 5ce:	09 f0       	breq	.+2      	; 0x5d2 <__mulsf3+0x12>
 5d0:	62 c0       	rjmp	.+196    	; 0x696 <__fp_inf>
 5d2:	67 c0       	rjmp	.+206    	; 0x6a2 <__fp_nan>
 5d4:	ee cf       	rjmp	.-36     	; 0x5b2 <__fp_szero>

000005d6 <__mulsf3x>:
 5d6:	ca df       	rcall	.-108    	; 0x56c <__fp_split3>
 5d8:	a8 f3       	brcs	.-22     	; 0x5c4 <__mulsf3+0x4>

000005da <__mulsf3_pse>:
 5da:	99 23       	and	r25, r25
 5dc:	d9 f3       	breq	.-10     	; 0x5d4 <__mulsf3+0x14>
 5de:	55 23       	and	r21, r21
 5e0:	c9 f3       	breq	.-14     	; 0x5d4 <__mulsf3+0x14>
 5e2:	95 0f       	add	r25, r21
 5e4:	50 e0       	ldi	r21, 0x00	; 0
 5e6:	55 1f       	adc	r21, r21
 5e8:	aa 27       	eor	r26, r26
 5ea:	ee 27       	eor	r30, r30
 5ec:	ff 27       	eor	r31, r31
 5ee:	bb 27       	eor	r27, r27
 5f0:	00 24       	eor	r0, r0
 5f2:	08 94       	sec
 5f4:	67 95       	ror	r22
 5f6:	20 f4       	brcc	.+8      	; 0x600 <__mulsf3_pse+0x26>
 5f8:	e2 0f       	add	r30, r18
 5fa:	f3 1f       	adc	r31, r19
 5fc:	b4 1f       	adc	r27, r20
 5fe:	0a 1e       	adc	r0, r26
 600:	22 0f       	add	r18, r18
 602:	33 1f       	adc	r19, r19
 604:	44 1f       	adc	r20, r20
 606:	aa 1f       	adc	r26, r26
 608:	66 95       	lsr	r22
 60a:	a9 f7       	brne	.-22     	; 0x5f6 <__mulsf3_pse+0x1c>
 60c:	77 95       	ror	r23
 60e:	30 f4       	brcc	.+12     	; 0x61c <__mulsf3_pse+0x42>
 610:	f3 0f       	add	r31, r19
 612:	b4 1f       	adc	r27, r20
 614:	0a 1e       	adc	r0, r26
 616:	12 1e       	adc	r1, r18
 618:	08 f4       	brcc	.+2      	; 0x61c <__mulsf3_pse+0x42>
 61a:	63 95       	inc	r22
 61c:	33 0f       	add	r19, r19
 61e:	44 1f       	adc	r20, r20
 620:	aa 1f       	adc	r26, r26
 622:	22 1f       	adc	r18, r18
 624:	76 95       	lsr	r23
 626:	99 f7       	brne	.-26     	; 0x60e <__mulsf3_pse+0x34>
 628:	87 95       	ror	r24
 62a:	20 f4       	brcc	.+8      	; 0x634 <__mulsf3_pse+0x5a>
 62c:	b4 0f       	add	r27, r20
 62e:	0a 1e       	adc	r0, r26
 630:	12 1e       	adc	r1, r18
 632:	63 1f       	adc	r22, r19
 634:	44 0f       	add	r20, r20
 636:	aa 1f       	adc	r26, r26
 638:	22 1f       	adc	r18, r18
 63a:	33 1f       	adc	r19, r19
 63c:	86 95       	lsr	r24
 63e:	a9 f7       	brne	.-22     	; 0x62a <__mulsf3_pse+0x50>
 640:	86 2f       	mov	r24, r22
 642:	71 2d       	mov	r23, r1
 644:	60 2d       	mov	r22, r0
 646:	11 24       	eor	r1, r1
 648:	9f 57       	subi	r25, 0x7F	; 127
 64a:	50 40       	sbci	r21, 0x00	; 0
 64c:	8a f0       	brmi	.+34     	; 0x670 <__mulsf3_pse+0x96>
 64e:	e1 f0       	breq	.+56     	; 0x688 <__mulsf3_pse+0xae>
 650:	88 23       	and	r24, r24
 652:	4a f0       	brmi	.+18     	; 0x666 <__mulsf3_pse+0x8c>
 654:	ee 0f       	add	r30, r30
 656:	ff 1f       	adc	r31, r31
 658:	bb 1f       	adc	r27, r27
 65a:	66 1f       	adc	r22, r22
 65c:	77 1f       	adc	r23, r23
 65e:	88 1f       	adc	r24, r24
 660:	91 50       	subi	r25, 0x01	; 1
 662:	50 40       	sbci	r21, 0x00	; 0
 664:	a9 f7       	brne	.-22     	; 0x650 <__mulsf3_pse+0x76>
 666:	9e 3f       	cpi	r25, 0xFE	; 254
 668:	51 05       	cpc	r21, r1
 66a:	70 f0       	brcs	.+28     	; 0x688 <__mulsf3_pse+0xae>
 66c:	14 c0       	rjmp	.+40     	; 0x696 <__fp_inf>
 66e:	a1 cf       	rjmp	.-190    	; 0x5b2 <__fp_szero>
 670:	5f 3f       	cpi	r21, 0xFF	; 255
 672:	ec f3       	brlt	.-6      	; 0x66e <__mulsf3_pse+0x94>
 674:	98 3e       	cpi	r25, 0xE8	; 232
 676:	dc f3       	brlt	.-10     	; 0x66e <__mulsf3_pse+0x94>
 678:	86 95       	lsr	r24
 67a:	77 95       	ror	r23
 67c:	67 95       	ror	r22
 67e:	b7 95       	ror	r27
 680:	f7 95       	ror	r31
 682:	e7 95       	ror	r30
 684:	9f 5f       	subi	r25, 0xFF	; 255
 686:	c1 f7       	brne	.-16     	; 0x678 <__mulsf3_pse+0x9e>
 688:	fe 2b       	or	r31, r30
 68a:	88 0f       	add	r24, r24
 68c:	91 1d       	adc	r25, r1
 68e:	96 95       	lsr	r25
 690:	87 95       	ror	r24
 692:	97 f9       	bld	r25, 7
 694:	08 95       	ret

00000696 <__fp_inf>:
 696:	97 f9       	bld	r25, 7
 698:	9f 67       	ori	r25, 0x7F	; 127
 69a:	80 e8       	ldi	r24, 0x80	; 128
 69c:	70 e0       	ldi	r23, 0x00	; 0
 69e:	60 e0       	ldi	r22, 0x00	; 0
 6a0:	08 95       	ret

000006a2 <__fp_nan>:
 6a2:	9f ef       	ldi	r25, 0xFF	; 255
 6a4:	80 ec       	ldi	r24, 0xC0	; 192
 6a6:	08 95       	ret

000006a8 <__fp_pscA>:
 6a8:	00 24       	eor	r0, r0
 6aa:	0a 94       	dec	r0
 6ac:	16 16       	cp	r1, r22
 6ae:	17 06       	cpc	r1, r23
 6b0:	18 06       	cpc	r1, r24
 6b2:	09 06       	cpc	r0, r25
 6b4:	08 95       	ret

000006b6 <__fp_pscB>:
 6b6:	00 24       	eor	r0, r0
 6b8:	0a 94       	dec	r0
 6ba:	12 16       	cp	r1, r18
 6bc:	13 06       	cpc	r1, r19
 6be:	14 06       	cpc	r1, r20
 6c0:	05 06       	cpc	r0, r21
 6c2:	08 95       	ret

000006c4 <__fp_round>:
 6c4:	09 2e       	mov	r0, r25
 6c6:	03 94       	inc	r0
 6c8:	00 0c       	add	r0, r0
 6ca:	11 f4       	brne	.+4      	; 0x6d0 <__fp_round+0xc>
 6cc:	88 23       	and	r24, r24
 6ce:	52 f0       	brmi	.+20     	; 0x6e4 <__fp_round+0x20>
 6d0:	bb 0f       	add	r27, r27
 6d2:	40 f4       	brcc	.+16     	; 0x6e4 <__fp_round+0x20>
 6d4:	bf 2b       	or	r27, r31
 6d6:	11 f4       	brne	.+4      	; 0x6dc <__fp_round+0x18>
 6d8:	60 ff       	sbrs	r22, 0
 6da:	04 c0       	rjmp	.+8      	; 0x6e4 <__fp_round+0x20>
 6dc:	6f 5f       	subi	r22, 0xFF	; 255
 6de:	7f 4f       	sbci	r23, 0xFF	; 255
 6e0:	8f 4f       	sbci	r24, 0xFF	; 255
 6e2:	9f 4f       	sbci	r25, 0xFF	; 255
 6e4:	08 95       	ret

000006e6 <__ltoa_ncheck>:
 6e6:	bb 27       	eor	r27, r27
 6e8:	2a 30       	cpi	r18, 0x0A	; 10
 6ea:	51 f4       	brne	.+20     	; 0x700 <__ltoa_ncheck+0x1a>
 6ec:	99 23       	and	r25, r25
 6ee:	42 f4       	brpl	.+16     	; 0x700 <__ltoa_ncheck+0x1a>
 6f0:	bd e2       	ldi	r27, 0x2D	; 45
 6f2:	90 95       	com	r25
 6f4:	80 95       	com	r24
 6f6:	70 95       	com	r23
 6f8:	61 95       	neg	r22
 6fa:	7f 4f       	sbci	r23, 0xFF	; 255
 6fc:	8f 4f       	sbci	r24, 0xFF	; 255
 6fe:	9f 4f       	sbci	r25, 0xFF	; 255
 700:	01 c0       	rjmp	.+2      	; 0x704 <__ultoa_common>

00000702 <__ultoa_ncheck>:
 702:	bb 27       	eor	r27, r27

00000704 <__ultoa_common>:
 704:	e4 2f       	mov	r30, r20
 706:	f5 2f       	mov	r31, r21
 708:	a6 2f       	mov	r26, r22
 70a:	62 17       	cp	r22, r18
 70c:	71 05       	cpc	r23, r1
 70e:	81 05       	cpc	r24, r1
 710:	91 05       	cpc	r25, r1
 712:	33 0b       	sbc	r19, r19
 714:	30 fb       	bst	r19, 0
 716:	66 f0       	brts	.+24     	; 0x730 <__ultoa_common+0x2c>
 718:	aa 27       	eor	r26, r26
 71a:	66 0f       	add	r22, r22
 71c:	77 1f       	adc	r23, r23
 71e:	88 1f       	adc	r24, r24
 720:	99 1f       	adc	r25, r25
 722:	aa 1f       	adc	r26, r26
 724:	a2 17       	cp	r26, r18
 726:	10 f0       	brcs	.+4      	; 0x72c <__ultoa_common+0x28>
 728:	a2 1b       	sub	r26, r18
 72a:	63 95       	inc	r22
 72c:	38 50       	subi	r19, 0x08	; 8
 72e:	a9 f7       	brne	.-22     	; 0x71a <__ultoa_common+0x16>
 730:	a0 5d       	subi	r26, 0xD0	; 208
 732:	aa 33       	cpi	r26, 0x3A	; 58
 734:	08 f0       	brcs	.+2      	; 0x738 <__ultoa_common+0x34>
 736:	a9 5d       	subi	r26, 0xD9	; 217
 738:	a1 93       	st	Z+, r26
 73a:	36 f7       	brtc	.-52     	; 0x708 <__ultoa_common+0x4>
 73c:	b1 11       	cpse	r27, r1
 73e:	b1 93       	st	Z+, r27
 740:	10 82       	st	Z, r1
 742:	84 2f       	mov	r24, r20
 744:	95 2f       	mov	r25, r21
 746:	00 c0       	rjmp	.+0      	; 0x748 <strrev>

00000748 <strrev>:
 748:	a8 2f       	mov	r26, r24
 74a:	b9 2f       	mov	r27, r25
 74c:	e8 2f       	mov	r30, r24
 74e:	f9 2f       	mov	r31, r25
 750:	67 2f       	mov	r22, r23
 752:	71 91       	ld	r23, Z+
 754:	77 23       	and	r23, r23
 756:	e1 f7       	brne	.-8      	; 0x750 <strrev+0x8>
 758:	32 97       	sbiw	r30, 0x02	; 2
 75a:	04 c0       	rjmp	.+8      	; 0x764 <strrev+0x1c>
 75c:	7c 91       	ld	r23, X
 75e:	6d 93       	st	X+, r22
 760:	70 83       	st	Z, r23
 762:	62 91       	ld	r22, -Z
 764:	ae 17       	cp	r26, r30
 766:	bf 07       	cpc	r27, r31
 768:	c8 f3       	brcs	.-14     	; 0x75c <strrev+0x14>
 76a:	08 95       	ret

0000076c <_exit>:
 76c:	f8 94       	cli

0000076e <__stop_program>:
 76e:	ff cf       	rjmp	.-2      	; 0x76e <__stop_program>
